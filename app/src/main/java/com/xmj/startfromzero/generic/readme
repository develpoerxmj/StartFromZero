泛型通过在编译时检测到更多错误来增加代码的稳定性

泛型使types（类和接口）在定义类、接口、方法时成为参数

类型参数提供了一种不同的输入重用相同的代码的方法

与形式参数类似，而形参输入的是值，类型参数输入的是类型

好处
	1、编译时进行更强大的类型检查
		Java编译器将强类型检查应用与泛型代码，违反类型安全时报错
	2、清除转换
	3、实现泛型算法
		可以处理不同类型的集合

泛型类
	class name<T1, T2, ..., Tn>{/*...*/}
	类型变量 T 可以是任何非基本类型

public class Box<T>{
	private T t;
	public void set(T t){this.t = t;}
	public T get(){return t;}
}

Box<T>        t为类型形参
Box<String>   String为类型实参
Box<String>   称为参数化类型
Box           称为原始类型

要创建 Box<T> 的参数化类型，需要为形式类型形参 T 提供实际类型实参：

Box<Integer> intBox = new Box<>();
如果省略实际类型实参，则创建 Box<T> 的原始类型：

Box rawBox = new Box();
因此，Box 是泛型类型 Box<T> 的原始类型。

Java 7及以上，编译器可从上下文推断类型实参 可用<>替换

