设计模式六大原则
    1、单一职责原则
        就一个类而言，应该仅有一个引起它变化的原因
        不要让一个类承担的职责过多
    2、开放封闭原则
        类、模块、函数等应该是可以扩展的，但是不可修改
        扩展开放，修改封闭
    3、里氏替换原则
        所有引用基类（父类）的地方必须能透明的使用其子类的对象
        基类类型对对象进行定义，运行时确定其子类

        注意的问题
            1、子类的所有方法必须在父类中声明，或子类必须实现父类中声明的所有方法
            2、尽量把父类设计为抽象类或接口
        里氏替换原则是开放封闭原则的具体实现手段之一
    4、依赖倒置原则
        高层模块不应该依赖底层模块，两者都应该依赖于抽象，抽象不应该依赖于细节，细节应该依赖于抽象
        实现类之间不产生依赖，其依赖通过接口或抽象类产生
    5、迪米特原则     最少知识原则
        一个软件实体应当尽可能少的与其他实体发生相互作用
        减少对象间的交互，一个对象调另一对象的方法，通过引入第三者来降低对象耦合
        注意的问题
            1、尽量创建松耦合的类
            2、降低类中成员变量和成员函数的访问权限
            3、对其他对象的引用降到最低
    6、接口隔离原则
        一个对象对另一个类的依赖应该建立在最小的接口上
        注意的问题
            1、接口尽量小
            2、为依赖接口类定制服务，只暴露调用的类它需要的方法
            3、提高类聚，减少对外交互，接口尽量少用public


