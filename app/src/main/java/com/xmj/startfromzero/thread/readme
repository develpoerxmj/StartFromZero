进程——操作系统结构的基础，是程序在一个数据集合上运行的过程，是系统进行资源分配和调度的基本单元。
进程就是程序的实体，是受操作系统管理的基本运行单元

线程：进程中运行的各种子任务，是操作系统调度的最小单元，也叫做轻量级进程
一个进程中可以有多个线程，这些线程拥有各自的计数器，堆栈和局部变量等属性，并且能够访问共享的内存的变量

多线程的好处——减少程序的响应时间，
             创建和切换开销小，数据共享方面效率非常高
             多CPU计算机使用多线程能提高CPU的利用率
             简化程序结构，便于理解维护

线程的状态
New：新创建状态
    线程被创建，还没有调用start方法，
Runnable：可运行状态
    调用了start方法，不一定在运行，也可能在等待CPU资源（也可分为ready和running）
Blocked：阻塞状态
    线程被锁阻塞，等待获取锁来继续执行下一不操作
Waiting：等待状态（wait()、join()）
    线程不活动，不运行代码，消耗最少的资源，等待线程调度器唤醒
Timed Waiting：超时等待状态
    可在指定时间后自行返回
Terminated：终止状态
    运行完或异常退出
见图thread.png



线程中断
thread.interrupt()方法    线程中断标志位置位（true）
线程会不时的检查中断标志位，以判断线程是否该被中断

Thread.currentThread().isInterrupted()  检查是否被中断

Thread.interrupted()    对中断标志位复位（false）

处于阻塞状态的线程如果检测到中断标志位，则会抛出异常InterruptedException并将标志位复位

中断标志位只是引起线程的注意，并不一定会终止线程，大部分情况线程会将中断标志位作为终止线程的请求

